# Learningplaywright
# Date 16 july 2024

 Learing start date -  16 july 2024
installation
npm init playwright@latest
it will create structure 

playwright.conf.js - it is test runner 

package.json -- it like maven all dependecy required to run project


javascript code is anync() we need to give async() to make each statment execute in 
sequence
before any action we need to write "await" 

async() and await come together 

we can use fat pipe ----   ()=> 


import { test } from '@playwright/test'

*******************************************************************************************

1. test case - test() 
test tag  is comming from '@playwright/test
 broswer is fixture 
 it is use to set new context() -- we can send cookies and other details to 
 the browser 
 context.newPage() - to open page fresh page 
page.goto -final open page in browser
 example
test('Title of test', async ({ browser }) => {
    const context = await browser.newContext()
    const page = await context.newPage()
    await page.goto('https://playwright.dev/');

})

*******************************************************************************************
/ if we dont have any context to set we can direcly use page fixture and open page 
// page.goto()
test('Title of test', async ({ page }) => {
    await page.goto('https://playwright.dev/');

})

*******************************************************************************************
Date 17/7/24

playwright  by default  run test in headless mode 
*******************************************************************************************

command to run playwright test 

npx playwright test
*******************************************************************************************

to run in head mode use --headed 

npx playwright test --headed
*******************************************************************************************

to run specific test we have to use test.only()
example 
test.only('Page Context Test', async ({ page }))
*******************************************************************************************

title - page.title()
*******************************************************************************************

expect asserstion - expect(page).toHaveTitle('Google')
*******************************************************************************************

webkit -- sfari browser
*******************************************************************************************

to make   every time Test run in headed mode we can give  command in config file
as  
  headless : false

 projects: [
 name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
        headless: false

      },
 ]
*******************************************************************************************
*******************************************************************************************

 locator ()- to give locator value 
 page.locator('#username')
*******************************************************************************************

fill() - >  to enter the data
page.locator('#username').fill('rahulshettyaccedemy')
*******************************************************************************************
textContent()-> to get text from locator
   Example
  console.log(await page.locator("[style*='block']").textContent())

*******************************************************************************************
toContainText() ->  to validate the text 
    Example 
    await expect(page.locator("[style*='block']")).toContainText('Incorrect')
*******************************************************************************************
clear the existing text we use->  fill("")
*******************************************************************************************

date 18/7/2024
 
  if data is loaded in ui based on service call( network tab some servies get all ui data from backend ) we can use waitForLoadState('networkidle') to wait until network tab beocome ideal 
  example 
      await page.waitForLoadState('networkidle')
    console.log(await page.locator('h5 b').allTextContents())  

    waitForLoadState('networkidle') is not stable as per playwright doc
     we can use waitFor() it wait for loctor -> locator('h5 b') to visible but in our case 
   return multiple elements so in our case we need first
    examples
    await page.locator('h5 b').first().waitFor();
    console.log(await page.locator('h5 b').allTextContents())
*******************************************************************************************
Notes - If any test name is with other test it will run so make sure all test have unique name
*******************************************************************************************
Dropdown 
 static drop down
 check for select class we use selectOption(attribute vlaue)

 example
  const dropdown = page.locator("select[class='form-control']")
   await dropdown.selectOption('consult')
   ****************************************************************************************
   if want to open playwright in playwright tool use 
   page.pause()

   ****************************************************************************************
to verify any radio or checkbox is checked or not we use .isChecked()

   ****************************************************************************************
 19 July 2024
 toBeChecked()--> it is used with expect() to validate the radio button/checkbox is checked
 if not checked it fail the assertion 



 #radio button
 await page.locator('.radiotextsty').last().click()
 await expect(page.locator('.radiotextsty').last()).toBeChecked()

 #checkbox
 await page.locator('#terms').click()
await expect(page.locator('#terms')).toBeChecked()


****************************************************************************************
await can use where action in performed

****************************************************************************************
Date 20/7/2024

  // to open any test in debug mode 
   // npx playwright test <#testname > --headed --debug
   it is genrate the trace 
   
****************************************************************************************
UI inspector - used to genrate the locator //validate the locator in Loctor ( in ui explorer)
****************************************************************************************
Recording in playwright (codegen it is commad )

npx playwright codegen --viewport-size=800,600 playwright.dev

it will generate the code whatever action we performed
****************************************************************************************
Report

it default have html report
it is generate from index.html
playwright-report\index.html

paate the html address in browser u seen html report
**************************************************************************************
Screenshot
in cofig file we give the  below command  it will capture screen shot when test is fail 

Screenshot:on

****************************************************************************************
trace  to enable tace we give  in config file

trace: 'on' - it generate tace always 
trace : 'retain-on-failure' it generate tace when test fails

one folder will generate called playwright report -> test-results 
each Test have one folder which contains it trace

to view trace  go to  -https://trace.playwright.dev/
locate the trace zip in this url u will  trace in browser
****************************************************************************************
Date 21/7/2024
 two type locator  based on text in playright 
    example -  await products.nth(i).locator("text=  Add To Cart").click()
    based on text we create locator uning "text"

****************************************************************************************
playwirght have text based locator  where we pass tag name followed by
   "has-text" below in example
    const bool = await page.locator("h3:has-text('ZARA COAT 3')").isVisible()

****************************************************************************************
Date 22/7/2024
pressSequentially()
To type  and wait for auto selection to appear we need word by word type 
  so we use pressSequentially()
****************************************************************************************
Specail locator in playwright 

1) getByRole

//getByLabel() -it is special method in playwright  which is used get find the text if they part of label tag
    // it work in radio and checkbox
    // it will work in dropdown 
    // it will flakey while enter in textbox not recomanded 

    Example 
    await page.getByLabel('Check me out if you Love IceCreams!').click()
    await page.getByLabel('Employed').check()
    await page.getByLabel('Gender').selectOption('Female')
****************************************************************************************

Playwright ui window to run test from there 
npx playwright test --ui  

****************************************************************************************
Date 23/7/2024
getByPlaceholder()
Example: - 
 if we have tag name is placeholder we can use getByPlaceholder()
    await page.getByPlaceholder('Password')

****************************************************************************************
getByRole()
here we need to pass loctor type and it name
example- we have button whose name is "Submit" 
await page.getByRole("button", { name: 'Submit' }).click()

****************************************************************************************
chainig of locator 
     we use css in locator()  the use filter() which internally use getByText()
    then use getByRole() here we have only one button so we pass simply  button without name
    Example
    await page.locator('app-card').filter({ hasText: 'Nokia Edge' }).getByRole('button').click()


****************************************************************************************

plywright - we have use count() instead of lenght to get length of array

****************************************************************************************
date 24/7/2024

goBack() - to back previous url
goForward() - to move next url 

example 
    await page.goto("https://rahulshettyacademy.com/AutomationPractice/")
    await page.goto("https://www.google.com/")
    await page.goBack()
    await page.goForward()

****************************************************************************************
 toBeVisible() -To valiate element is visible
 example 
 await expect(page.locator('#displayed-text')).toBeVisible()

****************************************************************************************
toBeHidden() to valiate element is hidden

Example

await expect(page.locator('#displayed-text')).toBeHidden()
****************************************************************************************
Alert 
 In playwright handle javascript popup we use on() which accpect event and it crossponding method .any popup is called dialog and and we need to pass specific method to perform action
     dialog.accept() - click ok 
     dialog.dismiss() - to click cancel 
     we define it anywhere and when pop appear it work
     Example  
     ok click -  page.on('dialog', dialog => dialog.accept())
    cancel click-   page.on('dialog', dialog => dialog.dismiss())
    await page.locator('#alertbtn').click()
    await page.locator('#confirmbtn').click()


****************************************************************************************
Frame
we need to swtich to frame 
it tag is iFrame or frameSet it mean it is frame
 we need to got to frame use "frameLocator" and stored them in on variable

Example
    const framesPage = page.frameLocator('#courses-iframe')
:visible
 in frame we have onther webpage we look for locator like link - lifetime
 but it appear 2 times but one is invisible mode  so to select visible locator 
 we use :visble with locator
 Example 
    await framesPage.locator("li a[href*='lifetime']:visible").click()

****************************************************************************************
API testing in playwright 

 we stored the seesion and we can again use it login in incognito mode without using 
 usernamae and password 
 in postman 
 method - post
 url -https://rahulshettyacademy.com/api/ecom/auth/login
 body  {"userEmail": "nitesh@example.com", "userPassword": "Lan#2070"}

 reponse we get 

 {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2Njk4ZDA1OWFlMmFmZDRjMGIyOTcyODEiLCJ1c2VyRW1haWwiOiJuaXRlc2hAZXhhbXBsZS5jb20iLCJ1c2VyTW9iaWxlIjo5ODk4OTg0NjEyLCJ1c2VyUm9sZSI6ImN1c3RvbWVyIiwiaWF0IjoxNzIxODAzNjQ1LCJleHAiOjE3NTMzNjEyNDV9.AleKitioZCnmAOxlGc1Whlr0f9wgsxrPGXHEvoEJ0rQ",
    "userId": "6698d059ae2afd4c0b297281",
    "message": "Login Successfully"
}

use the above token in incognito mode 
url - https://rahulshettyacademy.com/client/
open application tab( after pressing F12 or inspect )
In local storage 
create a key called "token" and paste the value of token get in postman and hit enter 
you will see we are logined without giving email and password
**************************************************************************
Date 25/7/2024
// some developer decide to where to use the token in different place 
1. Local stroage 
2 .Cookies 
3.Bearer token 
**************************************************************************
Date 26/7/2024

we can save the  session state of any website and store and use it 
Example -In the below code login the merchant and get the details of 
sessionstate and saved in context and use that context to aviod re login for 
any other test case 
1) storageState() - it used store the StorageSession() 
it store sesssion detail in session.json file
    Example -  await context.storageState({ path: "session.json" })
 here we are using browser.new Context()- and we pass storageState() to use in other testcase
 example 
    webContext = await browser.newContext({ storageState: "session.json" })
**************************************************************************
Debug 
 -- debug - it start from first state
Note -  it work on webui not in api 

step 1 -  In package.json add value in script section to run npm script  
in pacakge.json
example
"scripts": {
    "test": "npx playwright test WebApiPart1.spec.js --headed"
  },
step 2 - press ctrl+shift+P -> select npm debug script 
it will pick the script define in  script section of package.json

****************************************************************************************
In playwright we can ulter the reponse what we are  call mocking response or intercepting 
network response
************************************************************************
Date 27/7/2024
Id  for https://rahulshettyacademy.com/client
shiv@example.com/Lan#2070

***********************************************************************
Test Case Details 
NetworkTest.spec.js - It demo how can we mock the actual repsonse with our
response using 
route()
fetch()

****************************************************************************************
Secuirty Testing
  intercept the request first - to get forbidden  message
  Test Case Details 
  SecurityTest.spec.js -It demo how can we moke the actual request with our request 
  using 
  route.continue({url:" mock url"})

****************************************************************************************
How to abort Network call 
 sever is down -- it abort example of network call
Test Case details 
NetworkAbort.spec.js

 // abort() --> it is used to blocked the network call 
    // to alter network all we use router ()
    //  here we block all request which having .jpg or ,.png or .jpeg at the end
    await page.route('**/*.{jpg,png,jpeg}', route => route.abort())


****************************************************************************************
To Track all response and request made in ui we can gt details
 page.on()--> 
    // playwright can track all the request/response  which is used in UI 
    //  on() -it is listener it invoked when event occur like request() resposnse()
    page.on('request', request => console.log('Request - ' + request.url()))
    page.on('response', response => console.log("Response - " + response.url(), "Response status - " + response.status()))

 Test Case details 
NetworkAbort.spec.js

****************************************************************************************
Screenschot  and visual testing in playwright 
 1.  partial take screensot ( specfic area screenshot)
  we  need to pass locator then use screenshot method
  await page.locator('.class1').first().screenshot({ path: "patialScreenshot.png" })
2.  take scree
nshot on entire page 
    await page.screenshot({ path: 'screenshot.png' })
Test case Details 


Test case Details 
ScreenshotVisualTest.spec.js
test name -Sreenshot partail and full page

*******************************************************************************
 Visual testing 
 toMatchSnapshot()
 Match iamge with screenshot to validate them 
we need to use toMatchSnapshot()
 expect(await page.screenshot()).toMatchSnapshot('test.png')
Test case Details 
ScreenshotVisualTest.spec.js
test Name -Visual testing using playwright

*******************************************************************************
Reading from excel file using javascript
 
 exceljs need to download in npm 
https://www.npmjs.com/package/exceljs
 npm install exceljs
*********************************************************************************************
Date 28/7/24

 // in playwright it cannot handle the window ( pc event to click button)
    // so in playwright it setInputFiles() to upload file from window 
    // note - it work on only file type tag
    await page.locator("#fileinput").setInputFiles('${downloadsPath}download.xlsx')

    Test Case detials - uploadDownload.spec.js

*********************************************************************


*********************************************************************


*********************************************************************


*********************************************************************
*********************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************
****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************
****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************
****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************
****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************
****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************
****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************



****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************


****************************************************************************************




